#  1번과 8번 예시를 제외한 모든 부분에서 에러를 맞이함 .. 왜 ???
#  ========================
#  print(solution(6, [46, 33, 33, 22, 31, 50], [27, 56, 19, 14, 14, 10]))
#  위의 예시에서 앞부분이 0 이면 잘려 나가는 걸 발견.... 만약 변의 길이가 6일 경우
#  어느 부분에서 0b01110으로 나오는 경우를 발견,,,
#  ========================
#  비상금 숨겨놓는 장소를 알려줄 비밀지도 습득

#  n = 정사각형의 크기 / arr1 , arr2 = 2진법으로 들어온 벽(#) 의 위치

#  return -> 두 사각형을 겹친 벽의 위치를 # 으로 표현

# 풀이순서
# 1. 십진수로 들어온 배열을 모두 2진으로 바꿔 새로운 배열에 저장
# 2. 각각의 배열의 원소를 체크, 1 -> 1 / 0 -> 0 새로운 배열에 저장 -> OR 연산을 진행 해주면 된다.
#  -- 추가 사항 --
# 2-1 만약 어느 부분에서 0b01110으로 나오는 경우를 발견,,, 이럴 경우 앞에 '0'을 붙여준다.
# 3. 1이 나왔을 경우 # 으로 변환 0 이면 공백으로 전환


def solution(n, arr1, arr2):
    answer = []
    for i in range(n):

        # 🌟 1번 , 2번 문제 풀이 과정
        #  bin(n) -> 십진수를 2진수로 변환 해준다. //
        #  bin(n)의 결과값은 0b1101 로 앞에 0b 라는
        #  접두어가 붙게 된다 (🙆‍♂️ String 값으로 형변환이 된다는 뜻 ).
        #  이것을 제거 하기 위해 [2:] 로 0 ,1 ,2번번째 값으로 slice 진행
        #  두개의 이진수를 바로 or 연산 해주기 위해 '|' 를 사용해서 연산을 진행한다.
        a = bin(arr1[i] | arr2[i])[2:]
        #  2-1 예외 발견시 처리 해줌.....ㅠㅜ
        b = '0' * (n-len(a)) + a

        #  3번 문제 풀이 과정
        b = b.replace('1', '#')
        b = b.replace('0', ' ')
        answer.append(b)

    return answer
