# https://www.acmicpc.net/problem/7576

# 토마토 농장에서 토마토를 보관한다.
# 보관 후 하루가 지나면 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토 들은 익게된다.
# 방향은 상하좌우를 의미한다. 대각선x
# 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지 최소 일수 구하기
# M은 가로 N은 세로
# 1은 익은 토마토 0은 익지 않은 토마토 -1은 비어있음
# 저장될 떄 다 익었으면 0 토마토가 모두 익지 못하면 -1을 출력

# 입력
# 첫 줄에는 상자의 크기를 나타내는 두 정수 M,N이 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M,N ≤ 1,000 이다. 둘째 줄부터는 하나의 상자에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 상자에 담긴 토마토의 정보가 주어진다. 하나의 줄에는 상자 가로줄에 들어있는 토마토의 상태가 M개의 정수로 주어진다. 정수 1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다.

# 토마토가 하나 이상 있는 경우만 입력으로 주어진다.

# 출력
# 여러분은 토마토가 모두 익을 때까지의 최소 날짜를 출력해야 한다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.

# 예제 입력 1 
# 6 4
# 0 0 0 0 0 0
# 0 0 0 0 0 0
# 0 0 0 0 0 0
# 0 0 0 0 0 1
# 예제 출력 1 
# 8
# 예제 입력 2 
# 6 4
# 0 -1 0 0 0 0
# -1 0 0 0 0 0
# 0 0 0 0 0 0
# 0 0 0 0 0 1
# 예제 출력 2 
# -1
# 예제 입력 3 
# 6 4
# 1 -1 0 0 0 0
# 0 -1 0 0 0 0
# 0 0 0 0 -1 0
# 0 0 0 0 -1 1
# 예제 출력 3 
# 6
# 예제 입력 4 
# 5 5
# -1 1 0 0 0
# 0 -1 -1 -1 0
# 0 -1 -1 -1 0
# 0 -1 -1 -1 0
# 0 0 0 0 0
# 예제 출력 4 
# 14
# 예제 입력 5 
# 2 2
# 1 -1
# -1 1
# 예제 출력 5 
# 0

# 문제풀이
# 최소 일수 이므로 BFS로 풀어야한다.
# 재귀함수를 써야하므로 함수 필요함
# pop을 사용했었는데 시간초과로 인해 deque를 사용해야함!

from collections import deque #BFS로 풀때는 그냥 deque사용하기!

M, N = map(int, input().split())
tmt= []
q = deque()
dx = [-1, 1, 0, 0] 
dy = [0, 0, -1, 1]
cnt = 0

for i in range(N) :
    tmt.append(list(map(int, input().split())))
    for j in range(M) :
        if tmt[i][j] == 1 :
            q.append((i,j)) # 숫자 받으면서 만약 1이면 q에 추가하기!

def bfs() :
    while q :
        x1,y1=q.popleft() #deque사용!
        for i in range(4) :
            x = x1 + dx[i]
            y = y1 + dy[i]
            if 0 <= x < N and 0<= y < M and tmt[x][y] == 0 :
                q.append((x,y)) # 추가하기
                tmt[x][y] = tmt[x1][y1] +1 # 해당 과일에서 숫자 +1시킴

bfs()
for i in tmt:
    for j in i :
        if j == 0 :
            print(-1)
            exit(0) # 아예 끝내버림
    cnt = max(cnt,max(i))

print(cnt-1)    
  