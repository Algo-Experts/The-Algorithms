# https://www.acmicpc.net/problem/7569

# 문제요약
# 토마토 문제인데 층이 쌓이고 상하좌우 + 위 아래까지 영향을 줌
# 최소 일수 구하기

# 입력
# 첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다. 둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다. 각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다. 정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 이러한 N개의 줄이 H번 반복하여 주어진다.

# 토마토가 하나 이상 있는 경우만 입력으로 주어진다.

# 출력
# 여러분은 토마토가 모두 익을 때까지 최소 며칠이 걸리는지를 계산해서 출력해야 한다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.

# 예제 입력 1 
# 5 3 1
# 0 -1 0 0 0
# -1 -1 0 1 1
# 0 0 0 1 1
# 예제 출력 1 
# -1
# 예제 입력 2 
# 5 3 2
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 0 0 0
# 0 0 1 0 0
# 0 0 0 0 0
# 예제 출력 2 
# 4
# 예제 입력 3 
# 4 3 2
# 1 1 1 1
# 1 1 1 1
# 1 1 1 1
# 1 1 1 1
# -1 -1 -1 -1
# 1 1 1 -1
# 예제 출력 3 
# 0

# 문제풀이
# 토마토 문제의 상위버전이라고 생각하면 됨
# 3차원으로 조금더 어렵지만 단계만 추가할 뿐임

import sys
from collections import deque

M, N, H = map(int, sys.stdin.readline().split())
tmt= [[] for _ in range(H)]
q = deque()
dx = [-1, 1, 0, 0, 0, 0] 
dy = [0, 0, -1, 1, 0, 0]
dz = [0, 0, 0, 0, 1, -1] # H까지 추가
cnt = 0

for i in range(H) :
    for j in range(N) :
        tmt[i].append(list(map(int, input().split())))
        for k in range(M) :
            if tmt[i][j][k] == 1 :
                q.append((i,j,k)) # 숫자 받으면서 만약 1이면 q에 추가하기!

def bfs() :
    while q :
        z1,x1,y1=q.popleft() 
        for i in range(6) :
            z = z1 + dz[i]
            x = x1 + dx[i]
            y = y1 + dy[i]
            if 0<= z < H and 0 <= x < N and 0<= y < M and tmt[z][x][y] == 0 :
                q.append((z,x,y)) 
                tmt[z][x][y] = tmt[z1][x1][y1] +1 # 해당 과일에서 숫자 +1시킴

bfs()
for i in range(H) :
    for j in range(N):
        for k in range(M) :
            if tmt[i][j][k] == 0:
                print(-1) # 0나오면 -1출력하고 끝
                exit(0) 
            cnt = max(cnt,tmt[i][j][k]) # 아니면 높은숫자 찾기

print(cnt-1) # 처음과일이 1로 시작하기 때문에 -1